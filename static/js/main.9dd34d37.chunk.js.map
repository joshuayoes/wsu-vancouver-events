{"version":3,"sources":["components/Navigation.js","components/About.js","components/EventCard.js","components/EventsFeed.js","components/Page.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","viewAbout","bind","viewEvents","this","changePage","href","className","icon","faShareSquare","onClick","faCalendarDay","faQuestionCircle","Component","About","target","rel","EventCard","key","guid","img","url","src","alt","title","faClock","beginTime","text","description","readMoreText","link","ics","faCalendarPlus","EventsFeed","state","events","isLoaded","Parser","parseURL","CORS_PROXY","then","feed","setState","items","catch","error","console","log","eventItems","map","event","enclosure","undefined","root","HTMLParser","content","childNodes","rawText","author","Fragment","type","color","height","width","Page","page","App","pageName","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sTAuCeA,E,YAlCX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAHJ,E,yEAOdE,KAAKJ,MAAMK,WAAW,W,mCAItBD,KAAKJ,MAAMK,WAAW,Y,+BAItB,OACI,6BACI,uBAAGC,KAAK,iCAAiCC,UAAU,gBAC/C,kBAAC,IAAD,CAAiBC,KAAMC,MAD3B,YAIA,0BAAMC,QAASN,KAAKD,WAAYI,UAAU,cACtC,kBAAC,IAAD,CAAiBC,KAAMG,MAD3B,UAIA,0BAAMD,QAASN,KAAKH,UAAWM,UAAU,aACrC,kBAAC,IAAD,CAAiBC,KAAMI,MAD3B,c,GA1BSC,aCUVC,MAZf,WACI,OACI,yBAAKP,UAAU,mBACX,qCACA,0CAAe,uBAAGD,KAAK,wBAAwBS,OAAO,SAASC,IAAI,uBAApD,gBACf,0JACA,2OACA,8DAAmC,uBAAGV,KAAK,iCAAiCS,OAAO,SAASC,IAAI,uBAA7D,WAAnC,oBAAkJ,uBAAGV,KAAK,qDAAqDS,OAAO,SAASC,IAAI,uBAAjF,a,iBCqC/IC,EAvCf,iLAEQ,OACI,yBAAKC,IAAKd,KAAKJ,MAAMmB,KAAMZ,UAAU,aAChCH,KAAKJ,MAAMoB,IAAIC,IAAM,yBAAKC,IAAKlB,KAAKJ,MAAMoB,IAAIC,IAAKE,IAAKnB,KAAKJ,MAAMwB,QAAY,GAChF,gCAAMpB,KAAKJ,MAAMwB,MAAjB,KACA,uBAAGjB,UAAU,aACT,kBAAC,IAAD,CAAiBC,KAAMiB,MACtBrB,KAAKJ,MAAM0B,WAEhB,kBAAC,IAAD,CACIC,KAAMvB,KAAKJ,MAAM4B,YACjBC,aAAa,cAEjB,yBAAKtB,UAAU,oBACX,gCACI,uBAAGD,KAAMF,KAAKJ,MAAM8B,KAAMf,OAAO,SAASC,IAAI,uBAC1C,kBAAC,IAAD,CAAiBR,KAAMC,MACvB,0BAAMF,UAAU,cAAhB,oBAGR,gCACI,uBAAGD,KAAMF,KAAKJ,MAAM+B,KAChB,kBAAC,IAAD,CAAiBvB,KAAMwB,MACvB,0BAAMzB,UAAU,cAAhB,iBAGR,gCACI,uBAAGD,KAAMF,KAAKJ,MAAM+B,KAChB,kBAAC,IAAD,CAAiBvB,KAAMwB,MACvB,0BAAMzB,UAAU,cAAhB,0BA9B5B,GAA+BM,a,0CCgGhBoB,G,mBA9FX,WAAYjC,GAAQ,IAAD,8BACf,4CAAMA,KACDkC,MAAQ,CACTC,OAAQ,GACRC,UAAU,GAJC,E,iFAQC,IAAD,QAKF,IAAIC,KAMVC,SAASC,8FACXC,KAAK,SAAAC,GACF,EAAKC,SAAS,CACVP,OAAQM,EAAKE,MACbP,UAAU,MAGjBQ,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,O,+BAKhC,IAAMG,EAAa5C,KAAK8B,MAAMC,OAAOc,IAAI,SAAAC,GAErC,IAAI9B,EAAM8B,EAAMC,eACQC,IAApBF,EAAMC,YACN/B,EAAM,CAACC,IAAK,OAOhB,IAAIgC,EAAOC,gBAAWJ,EAAMK,SACxB3B,EAAcyB,EAAKG,WAAW,GAAGA,WAAW,GAAG7B,KAG/CD,EAAY2B,EAAKG,WAAW,GAAGA,WAAW,GAAGA,WAAW,GAAGA,WAAW,GAAGA,WAAW,GAAGC,QAGvF1B,EAAG,UAAMmB,EAAMpB,KAAZ,QAMP,OAAQ,kBAAC,EAAD,CACJZ,IAAKgC,EAAM/B,KACXC,IAAKA,EACLI,MAAO0B,EAAM1B,MACbkC,OAAQR,EAAMQ,OACdhC,UAAWA,EACXE,YAAaA,EACbE,KAAMoB,EAAMpB,KACZC,IAAKA,MAKb,OAA4B,IAAxB3B,KAAK8B,MAAME,SAEP,kBAAC,IAAMuB,SAAP,KACI,oDACA,yBAAKpD,UAAU,UACX,kBAAC,IAAD,CACIqD,KAAK,YACLC,MAAM,UACNC,OAAQ,IACRC,MAAO,QAQnB,yBAAKxD,UAAU,cACX,oDACEyC,O,GAxFGnC,cCcVmD,E,iLAhBP,IAAIC,EAQJ,OALIA,EADoB,WAApB7D,KAAKJ,MAAMiE,KACJ,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAIP,yBAAK1D,UAAU,kBACT0D,O,GAZCpD,aC0BJqD,G,mBAxBb,WAAYlE,GAAO,IAAD,8BAChB,4CAAMA,KACDkC,MAAQ,CACX+B,KAAM,UAER,EAAK5D,WAAa,EAAKA,WAAWH,KAAhB,gBALF,E,wEAQPiE,GACT/D,KAAKsC,SAAS,CACZuB,KAAME,M,+BAKR,OACE,yBAAK5D,UAAU,OACb,kBAAC,EAAD,CAAYF,WAAYD,KAAKC,aAC7B,kBAAC,EAAD,CAAM4D,KAAM7D,KAAK8B,MAAM+B,Y,GAnBbpD,cCOEuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC,gB","file":"static/js/main.9dd34d37.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faQuestionCircle, faShareSquare, faCalendarDay } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass Navigation extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.viewAbout = this.viewAbout.bind(this);\r\n        this.viewEvents = this.viewEvents.bind(this);\r\n    }\r\n\r\n    viewAbout(){\r\n        this.props.changePage(\"about\")\r\n    }\r\n\r\n    viewEvents(){\r\n        this.props.changePage(\"events\")\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav>\r\n                <a href=\"https://www.vancouver.wsu.edu/\" className=\"nav-wsu-home\">\r\n                    <FontAwesomeIcon icon={faShareSquare} />\r\n                    WSU Home\r\n                </a>\r\n                <span onClick={this.viewEvents} className=\"nav-events\">\r\n                    <FontAwesomeIcon icon={faCalendarDay} />\r\n                    Events\r\n                </span>\r\n                <span onClick={this.viewAbout} className=\"nav-about\">\r\n                    <FontAwesomeIcon icon={faQuestionCircle} />\r\n                    About\r\n                </span>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navigation","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <div className=\"about-container\">\r\n            <h2>About</h2>\r\n            <h3>Created by <a href=\"http://joshuayoes.com\" target=\"_blank\" rel=\"noopener noreferrer\">Joshua Yoes</a></h3>\r\n            <p>This is a unoffical redesign of the WSU Vancouver Engage Events feed. This page is in no way affiliated with WSU Vancouver.</p>\r\n            <p>While I was at WSU Vancouver, I greatly enjoyed being involved on campus so I wanted to make a project that made it easier for people to find out when clubs meetings and other gatherings happen on campus.</p>\r\n            <p>If you enjoy this, follow me on <a href=\"https://twitter.com/joshuayoes\" target=\"_blank\" rel=\"noopener noreferrer\">Twitter</a> or fork this on <a href=\"https://github.com/joshuayoes/wsu-vancouver-events\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;","import React, { Component } from 'react'\r\nimport ReadMoreReact from 'read-more-react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faShareSquare, faCalendarPlus, faClock } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\n//has conditional UI for if the event has an image or not\r\nexport class EventCard extends Component {  \r\n    render() {\r\n        return (\r\n            <div key={this.props.guid} className=\"eventItem\">\r\n                {this.props.img.url ? <img src={this.props.img.url} alt={this.props.title} /> : ''}\r\n                <h2> {this.props.title} </h2>\r\n                <p className=\"eventTime\"> \r\n                    <FontAwesomeIcon icon={faClock} />\r\n                    {this.props.beginTime } \r\n                </p>\r\n                <ReadMoreReact \r\n                    text={this.props.description}\r\n                    readMoreText=\"Read More\"\r\n                /> \r\n                <div className=\"button-container\">\r\n                    <button> \r\n                        <a href={this.props.link} target=\"_blank\" rel=\"noopener noreferrer\"> \r\n                            <FontAwesomeIcon icon={faShareSquare} /> \r\n                            <span className=\"buttonText\">View on Engage</span> \r\n                        </a> \r\n                    </button>\r\n                    <button> \r\n                        <a href={this.props.ics}> \r\n                            <FontAwesomeIcon icon={faCalendarPlus} />\r\n                            <span className=\"buttonText\">Add To iCal</span> \r\n                        </a> \r\n                    </button>\r\n                    <button> \r\n                        <a href={this.props.ics}>\r\n                            <FontAwesomeIcon icon={faCalendarPlus} />\r\n                            <span className=\"buttonText\">Add To Outlook</span>\r\n                        </a> \r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EventCard\r\n","import React, { Component } from 'react'\r\nimport EventCard from './EventCard'\r\nimport Parser from 'rss-parser'\r\nimport { parse as HTMLParser } from 'node-html-parser'\r\nimport Loader from 'react-loader-spinner'\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\r\n\r\n\r\nclass EventsFeed extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            events: [],\r\n            isLoaded: false\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        //makes request to Engage RSS feed\r\n\r\n        //Uses rss-parser to turn RSS into JSON\r\n        //https://www.npmjs.com/package/rss-parser\r\n        let parser = new Parser();\r\n\r\n        // Note: some RSS feeds can't be loaded in the browser due to CORS security.\r\n        // To get around this, you can use a proxy.\r\n        const CORS_PROXY = \"https://cors-anywhere.herokuapp.com/\"\r\n        const RSS_FEED = 'https://vancouver-wsu.campuslabs.com/engage/events.rss'\r\n        parser.parseURL(CORS_PROXY + RSS_FEED)\r\n            .then(feed => {\r\n                this.setState({\r\n                    events: feed.items,\r\n                    isLoaded: true\r\n                });    \r\n            })\r\n            .catch(error => console.log(error));\r\n    };\r\n    \r\n    render() {\r\n        //iterates through each event and pass RSS info through props\r\n        const eventItems = this.state.events.map(event => {\r\n            //prevents undefined error if there is no event img\r\n            let img = event.enclosure;\r\n            if (event.enclosure === undefined) {\r\n                img = {url: null}\r\n            };\r\n\r\n            //Uses node-html-parser to grab content from incomplete RSS JSON\r\n            //https://www.npmjs.com/package/node-html-parser\r\n\r\n            //parse description from RSS feed\r\n            let root = HTMLParser(event.content);\r\n            let description = root.childNodes[0].childNodes[3].text;\r\n\r\n            //parse begin time from RSS feed\r\n            let beginTime = root.childNodes[0].childNodes[5].childNodes[1].childNodes[1].childNodes[0].rawText;\r\n\r\n            //creates URL to grab event data on click\r\n            let ics = `${event.link}.ics`;\r\n\r\n            //TO DO: write query for Google Calendar\r\n            //let googleCalendar = `${event.link}/googlepublish/`;\r\n\r\n            //pass each event property into props\r\n            return (<EventCard \r\n                key={event.guid}\r\n                img={img}\r\n                title={event.title}\r\n                author={event.author}\r\n                beginTime={beginTime}\r\n                description={description}\r\n                link={event.link}\r\n                ics={ics}\r\n            />)\r\n        });\r\n        \r\n        //UI while waiting for RSS fetch request \r\n        if (this.state.isLoaded === false){\r\n            return (\r\n                <React.Fragment>\r\n                    <h1>WSU Vancouver Events</h1>\r\n                    <div className=\"loader\">\r\n                        <Loader \r\n                            type=\"ThreeDots\"\r\n                            color=\"#981e32\"\r\n                            height={100}\r\n                            width={100}\r\n                        />\r\n                    </div>\r\n                </React.Fragment>\r\n            )\r\n        //UI once RSS fetch request has loaded \r\n        } else { \r\n            return (\r\n                <div className=\"eventsCard\">\r\n                    <h1>WSU Vancouver Events</h1>\r\n                    { eventItems }\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default EventsFeed;","import React, { Component } from 'react'\r\nimport About from './About';\r\nimport EventsFeed from './EventsFeed'\r\n\r\nclass Page extends Component {\r\n    render() {\r\n        let page;\r\n\r\n        if (this.props.page === \"events\"){\r\n            page = <EventsFeed />\r\n        } else {\r\n            page = <About />\r\n        }\r\n\r\n        return (\r\n            <div className=\"feed-container\">\r\n                { page }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Page","import React, { Component } from 'react';\nimport Navigation from './components/Navigation'\nimport Page from './components/Page'\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      page: \"events\"\n    }\n    this.changePage = this.changePage.bind(this)\n  }\n\n  changePage(pageName){\n    this.setState({\n      page: pageName\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Navigation changePage={this.changePage} />\n        <Page page={this.state.page}/>\n      </div>\n    );  \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}